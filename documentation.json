{
    "pipes": [],
    "interfaces": [
        {
            "name": "City",
            "id": "interface-City-964ba947a00a97350dcd7632629234a4",
            "file": "src/app/core/models/city.model.ts",
            "type": "interface",
            "sourceCode": "export interface City {\n  id: number;\n  name: string;\n  temp: string;\n  windSpeed: number;\n  visibility: number;\n  humidity: number;\n  pressure: number;\n  weather: string;\n}\n\nexport interface CityResponse {\n  id: number;\n  name: string;\n  main: {\n    temp: string;\n    humidity: number;\n    pressure: number;\n  };\n  wind: {\n    speed: number;\n  };\n  visibility: number;\n  weather: {\n    main: string;\n  }[];\n}",
            "properties": [
                {
                    "name": "humidity",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "pressure",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "temp",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "visibility",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "weather",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "windSpeed",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CityResponse",
            "id": "interface-CityResponse-964ba947a00a97350dcd7632629234a4",
            "file": "src/app/core/models/city.model.ts",
            "type": "interface",
            "sourceCode": "export interface City {\n  id: number;\n  name: string;\n  temp: string;\n  windSpeed: number;\n  visibility: number;\n  humidity: number;\n  pressure: number;\n  weather: string;\n}\n\nexport interface CityResponse {\n  id: number;\n  name: string;\n  main: {\n    temp: string;\n    humidity: number;\n    pressure: number;\n  };\n  wind: {\n    speed: number;\n  };\n  visibility: number;\n  weather: {\n    main: string;\n  }[];\n}",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "main",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "visibility",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "weather",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "wind",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Forecast",
            "id": "interface-Forecast-c22bccf74963b8cdd69bbd9f838c3060",
            "file": "src/app/core/models/forecast.ts",
            "type": "interface",
            "sourceCode": "export interface Forecast {\n  date: string;\n  temp: {\n    max: number;\n    min: number;\n  };\n  weather: string;\n}\n\nexport interface ForecastResponse {\n  list: {\n    main: {\n      temp_max: number;\n      temp_min: number;\n    },\n    weather: {\n      main: string;\n    }[],\n    dt_txt: string;\n  }[];\n}",
            "properties": [
                {
                    "name": "date",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "temp",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "weather",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ForecastResponse",
            "id": "interface-ForecastResponse-c22bccf74963b8cdd69bbd9f838c3060",
            "file": "src/app/core/models/forecast.ts",
            "type": "interface",
            "sourceCode": "export interface Forecast {\n  date: string;\n  temp: {\n    max: number;\n    min: number;\n  };\n  weather: string;\n}\n\nexport interface ForecastResponse {\n  list: {\n    main: {\n      temp_max: number;\n      temp_min: number;\n    },\n    weather: {\n      main: string;\n    }[],\n    dt_txt: string;\n  }[];\n}",
            "properties": [
                {
                    "name": "list",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "WeatherImageService",
            "id": "injectable-WeatherImageService-64670185fd60d1d2c89955e5e328e4cd",
            "file": "src/app/core/services/weather-image.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getImage",
                    "args": [
                        {
                            "name": "weatherState",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "weatherState",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { WeatherState } from '../models';\nimport { weatherImages } from '../constants'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherImageService {\n  getImage(weatherState: string) {\n    const state = weatherState.toLocaleUpperCase();\n    if (weatherImages[state]) {\n      return weatherImages[state];\n    }\n\n    return weatherImages[WeatherState.Clouds];\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "WeatherService",
            "id": "injectable-WeatherService-71cbb5391cbe32769309b1ffad5c11b4",
            "file": "src/app/core/services/weather.service.ts",
            "properties": [
                {
                    "name": "apiKey",
                    "defaultValue": "environment.weatherAPI.apiKey",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.weatherAPI.baseUrl",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "buildUrl",
                    "args": [
                        {
                            "name": "category",
                            "type": "string"
                        },
                        {
                            "name": "queryText",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryText",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getForecast",
                    "args": [
                        {
                            "name": "cityName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Forecast[]>",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "cityName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchCity",
                    "args": [
                        {
                            "name": "cityName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<City>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "cityName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { City, CityResponse } from '../models';\nimport { Forecast, ForecastResponse } from '../models/forecast';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n  private baseUrl = environment.weatherAPI.baseUrl;\n  private apiKey = environment.weatherAPI.apiKey;\n\n  constructor(private http: HttpClient) { }\n\n  private buildUrl(category: string, queryText: string) {\n    return `${this.baseUrl}/${category}?q=${queryText}&appid=${this.apiKey}&units=metric`;\n  }\n\n  searchCity(cityName: string): Observable<City> {\n    return this.http.get<CityResponse>(this.buildUrl('weather', cityName))\n      .pipe(\n        map(({ id, name, main, wind, visibility, weather }) => {\n          const { temp, humidity, pressure } = main;\n          return {\n            id,\n            name,\n            temp,\n            windSpeed: wind.speed,\n            visibility,\n            humidity,\n            pressure,\n            weather: weather[0].main\n          }\n        })\n      );\n  }\n\n  getForecast(cityName: string): Observable<Forecast[]> {\n    return this.http.get<ForecastResponse>(this.buildUrl('forecast', cityName))\n      .pipe(\n        map(({ list }) => {\n          const forecast = list.slice(1, 6);\n          return forecast.map(({ main, weather, dt_txt }) => ({\n            date: dt_txt,\n            weather: weather[0].main,\n            temp: {\n              max: main.temp_max,\n              min: main.temp_min\n            }\n          }));\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-2cc04bc9a2bfd89c4e980887b64287f9",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wa-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'weather-app-angular'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'wa-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'weather-app-angular';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\nh1 {\n  color: $primary-text-color;\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<wa-home></wa-home>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-39d75ad5ae62b609921d53dc8b8efc39",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wa-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "defaultValue": "this.primaryType",
                    "line": 12,
                    "type": "ButtonType"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "primaryType",
                    "defaultValue": "ButtonType.Primary",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "secondaryType",
                    "defaultValue": "ButtonType.Secondary",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ButtonType } from 'src/app/core/models';\n\n@Component({\n  selector: 'wa-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent {\n  readonly primaryType = ButtonType.Primary;\n  readonly secondaryType = ButtonType.Secondary;\n  @Input() type: ButtonType = this.primaryType;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"colors\";\n\n.button {\n  border: none;\n  padding: 0.7rem 1.25rem;\n  font-size: 1rem;\n  cursor: pointer;\n  color: $primary-text-color;\n  font-family: 'Raleway', sans-serif;\n\n  &.primary {\n    background-color: $primary-color;\n\n    &:hover {\n      background-color: lighten($primary-color, 6%);\n    }\n  }\n\n  &.secondary {\n    background-color: $secondary-color;\n\n    &:hover {\n      background-color: lighten($secondary-color, 6%);\n    }\n  }\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button class=\"button\" [ngClass]=\"{\n  'primary': type === primaryType,\n  'secondary': type === secondaryType\n}\">\n  <ng-content></ng-content>\n</button>\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-78b1c39666a2e631a1e33d7e17e595cf",
            "file": "src/app/shared/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wa-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'wa-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss']\n})\nexport class CardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.card {\n  background-color: $bg-color;\n  padding: 1.25rem;\n}",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "ForecastCardComponent",
            "id": "component-ForecastCardComponent-580aec1e5d5da18710f578f95135860e",
            "file": "src/app/home/forecast-card/forecast-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wa-forecast-card",
            "styleUrls": [
                "./forecast-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forecast-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "line": 11,
                    "type": "Forecast"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { format } from 'date-fns';\nimport { Forecast } from 'src/app/core/models/forecast';\n\n@Component({\n  selector: 'wa-forecast-card',\n  templateUrl: './forecast-card.component.html',\n  styleUrls: ['./forecast-card.component.scss']\n})\nexport class ForecastCardComponent {\n  @Input() item!: Forecast;\n\n  getDate(date: string): string {\n    return format(new Date(date), 'p');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.forecast-content {\n  text-align: center;\n}\n\n.forecast-date {\n  margin-top: 0;\n  margin-bottom: 0.625rem;\n}\n\n.forecast-temp {\n  display: flex;\n  margin-top: 2rem;\n  margin-bottom: 0;\n  justify-content: space-between;\n  align-items: flex-start;\n  > span:last-child {\n    color: $secondary-text-color;\n  }\n}\n\n.image-container {\n  height: 66px;\n}\n",
                    "styleUrl": "./forecast-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<wa-card>\n  <div class=\"forecast-content\">\n    <p class=\"forecast-date\">{{getDate(item.date)}}</p>\n    <div class=\"image-container\">\n      <wa-weather-image [weather]=\"item.weather\" [width]=\"57\"></wa-weather-image>\n    </div>\n    <p class=\"forecast-temp\">\n      <span>{{item.temp.max | number : '1.1-1'}}°C</span>\n      <span>{{item.temp.min | number : '1.1-1'}}°C</span>\n    </p>\n  </div>\n</wa-card>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-d3cf68be4117374f920513748fa1a860",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wa-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "city",
                    "type": "City",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "defaultCity",
                    "defaultValue": "'bogota'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "forecast",
                    "type": "Forecast[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "forecastSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "secondaryType",
                    "defaultValue": "ButtonType.Secondary",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "weatherSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ButtonType, City } from '../core/models';\nimport { WeatherService } from '../core/services/weather.service';\nimport { Forecast } from '../core/models/forecast';\n\n@Component({\n  selector: 'wa-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit, OnDestroy {\n  readonly secondaryType = ButtonType.Secondary;\n  private defaultCity = 'bogota';\n  city!: City;\n  forecast!: Forecast[];\n  private weatherSubscription!: Subscription;\n  private forecastSubscription!: Subscription;\n\n  constructor (private weatherService: WeatherService) { }\n\n  ngOnInit(): void {\n    this.weatherSubscription = this.weatherService\n      .searchCity(this.defaultCity)\n      .subscribe(city => {\n        this.city = city;\n      });\n\n    this.forecastSubscription = this.weatherService\n      .getForecast(this.defaultCity)\n      .subscribe(\n        forecast => this.forecast = forecast\n      );\n  }\n\n  ngOnDestroy(): void {\n    this.weatherSubscription.unsubscribe();\n    this.forecastSubscription.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.main-home {\n  display: grid;\n  grid-template-columns: 1fr;\n  @media screen and (min-width: 768px) {\n    grid-template-columns: 360px 1fr;\n  }\n}\n\n.info-home {\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: auto 2fr 3fr;\n  padding: 1.125rem 0.75rem;\n  background: url('../../assets/background.png') no-repeat, $bg-color;\n  background-position: center 50px;\n  background-size: 480px;\n\n  @media screen and (min-width: 768px) {\n    max-width: 360px;\n  }\n}\n\n.buttons-home {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.extra-home {\n  background-color: $bg-color-dark;\n  padding: 3.25rem 3.375rem;\n  @media screen and (min-width: 1200px) {\n    padding: 7.68rem;\n  }\n}\n\n.forecast-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));\n  grid-gap: 1.625rem;\n  > div {\n    border: 1px solid green;\n  }\n  @media screen and (min-width: 1200px) {\n    grid-gap: 2rem;\n  }\n}",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "weatherService",
                        "type": "WeatherService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "weatherService",
                        "type": "WeatherService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<main class=\"main-home\">\n  <section class=\"info-home\">\n    <div class=\"buttons-home\">\n      <wa-button [type]=\"secondaryType\">\n        Search for place\n      </wa-button>\n      <wa-icon-button>\n        <span class=\"material-icons\">gps_fixed</span>\n      </wa-icon-button>\n    </div>\n    <wa-weather-image [weather]=\"city.weather\" [verticalCenter]=\"true\"></wa-weather-image>\n    <wa-weather-info [city]=\"city\"></wa-weather-info>\n  </section>\n  <section class=\"extra-home\">\n    <div class=\"forecast-grid\">\n      <wa-forecast-card *ngFor=\"let item of forecast\" [item]=\"item\">\n      </wa-forecast-card>\n    </div>\n  </section>\n</main>"
        },
        {
            "name": "IconButtonComponent",
            "id": "component-IconButtonComponent-105d0eb61de838abf2a8db053b83ed5e",
            "file": "src/app/shared/components/icon-button/icon-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wa-icon-button",
            "styleUrls": [
                "./icon-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'wa-icon-button',\n  templateUrl: './icon-button.component.html',\n  styleUrls: ['./icon-button.component.scss']\n})\nexport class IconButtonComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.icon-button {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  cursor: pointer;\n  border: none;\n  background-color: $secondary-color;\n  color: $primary-text-color;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &:hover {\n    background-color: lighten($secondary-color, 6%);\n  }\n}",
                    "styleUrl": "./icon-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button class=\"icon-button\">\n  <ng-content></ng-content>\n</button>\n"
        },
        {
            "name": "WeatherImageComponent",
            "id": "component-WeatherImageComponent-31be5591510d84ba0bbfc4e13023108b",
            "file": "src/app/home/weather-image/weather-image.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wa-weather-image",
            "styleUrls": [
                "./weather-image.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./weather-image.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "verticalCenter",
                    "defaultValue": "false",
                    "line": 12
                },
                {
                    "name": "weather",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "width",
                    "defaultValue": "150",
                    "line": 11
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "image",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { WeatherImageService } from 'src/app/core/services/weather-image.service';\n\n@Component({\n  selector: 'wa-weather-image',\n  templateUrl: './weather-image.component.html',\n  styleUrls: ['./weather-image.component.scss']\n})\nexport class WeatherImageComponent implements OnInit {\n  @Input() weather!: string;\n  @Input() width = 150;\n  @Input() verticalCenter = false;\n  image!: string;\n\n  constructor (private weatherImageService: WeatherImageService) {}\n\n  ngOnInit(): void {\n    this.image = this.weatherImageService.getImage(this.weather);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".image-content {\n  display: flex;\n  align-items: flex-start;\n  justify-content: center;\n  height: 100%;\n\n  &.verticalCenter {\n    align-items: center;\n  }\n}",
                    "styleUrl": "./weather-image.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "weatherImageService",
                        "type": "WeatherImageService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "weatherImageService",
                        "type": "WeatherImageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"image-content\" [ngClass]=\"{'verticalCenter': verticalCenter}\">\n  <img\n    *ngIf=\"image\"\n    class=\"image\"\n    [src]=\"image\"\n    alt=\"weather state\"\n    [width]=\"width\"\n  >\n</div>\n"
        },
        {
            "name": "WeatherInfoComponent",
            "id": "component-WeatherInfoComponent-e33f85b52910f40d074b9086b603e5fb",
            "file": "src/app/home/weather-info/weather-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wa-weather-info",
            "styleUrls": [
                "./weather-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./weather-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "city",
                    "line": 10,
                    "type": "City"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentDate",
                    "defaultValue": "new Date()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { City } from 'src/app/core/models';\n\n@Component({\n  selector: 'wa-weather-info',\n  templateUrl: './weather-info.component.html',\n  styleUrls: ['./weather-info.component.scss']\n})\nexport class WeatherInfoComponent {\n  @Input() city!: City;\n  readonly currentDate = new Date();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'colors';\n\n.weather-info {\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  p {\n    margin: 0;\n  }\n}\n\n.temperature {\n  font-size: 5.5rem;\n\n  .unit {\n    font-size: 2.5rem;\n    color: $secondary-text-color;\n  }\n}\n\n.weather-extra {\n  flex: 1;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 1fr;\n\n  .time {\n    font-size: 2.25rem;\n    line-height: 2.75rem;\n    align-self: center;\n  }\n\n  .time,\n  .day,\n  .location {\n    text-transform: capitalize;\n    color: $secondary-text-color;\n  }\n\n  .day,\n  .location {\n    font-size: 1.125rem;\n    line-height: 1.625rem;\n  }\n\n  .location {\n    margin: 0.5rem 0 1.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    > span:first-child {\n      font-size: 1.125rem;\n      margin: 0 2px 2px 0;\n    }\n  }\n}\n\n.weather-location {\n  align-self: flex-end;\n}\n\n.day {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  .point {\n    height: 5px;\n    width: 5px;\n    border-radius: 50%;\n    background-color: $secondary-text-color;\n    margin: 0 0.5rem;\n  }\n}\n\n",
                    "styleUrl": "./weather-info.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"weather-info\" *ngIf=\"city\">\n  <p class=\"temperature\">\n    <span>{{city.temp | number : '1.1-1' }}</span>\n    <span class=\"unit\">°C</span>\n  </p>\n  <div class=\"weather-extra\">\n    <p class=\"time\">{{city.weather}}</p>\n    <div class=\"weather-location\">\n      <p class=\"day\">\n        <span>today</span>\n        <span class=\"point\"></span>\n        <span>{{ currentDate | date: 'EEEE, d MMMM' }}</span>\n      </p>\n      <p class=location>\n        <span class=\"material-icons\">\n          location_on\n          </span>\n        <span>{{city.name}}</span>\n      </p>\n    </div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HomeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ForecastCardComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "WeatherImageComponent"
                        },
                        {
                            "name": "WeatherInfoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "IconButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "IconButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Card",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/card/card.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `<wa-card>Card Component</wa-card>`\n})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  weatherAPI: {\n    baseUrl: 'https://api.openweathermap.org/data/2.5/weather',\n    apiKey: '<YOUR API KEY>'\n  }\n}"
            },
            {
                "name": "ForecastCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/forecast-card/forecast-card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IconButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/icon-button/icon-button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `\n    <wa-icon-button>\n      <span class=\"material-icons\">gps_fixed</span>\n    </wa-icon-button>\n  `\n})"
            },
            {
                "name": "images",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/weatherImages.ts",
                "type": "any",
                "defaultValue": "{\n  [WeatherState.Thunderstorm]: 'assets/thunderstorm.png',\n  [WeatherState.Drizzle]: 'assets/drizzle.png',\n  [WeatherState.Rain]: 'assets/rain.png',\n  [WeatherState.Snow]: 'assets/snow.png',\n  [WeatherState.Atmosphere]: 'assets/atmosphere.png',\n  [WeatherState.Clear]: 'assets/clear.png',\n  [WeatherState.Clouds]: 'assets/clouds.png'\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `<wa-button>Primary</wa-button>`\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `<wa-button type=${ButtonType.Secondary}>Secondary</wa-button>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/forecast-card/forecast-card.stories.ts",
                "type": "Story<ForecastCardComponent>",
                "defaultValue": "args => ({\n  props: { ...args }\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/weather-image/weather-image.stories.ts",
                "type": "Story<WeatherImageComponent>",
                "defaultValue": "args => ({\n  props: { ...args }\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/weather-info/weather-info.stories.ts",
                "type": "Story<WeatherInfoComponent>",
                "defaultValue": "args => ({\n  props: { ...args }\n})"
            },
            {
                "name": "WeatherImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/weather-image/weather-image.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WeatherInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/weather-info/weather-info.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ButtonType",
                "childs": [
                    {
                        "name": "Primary",
                        "value": "PRIMARY"
                    },
                    {
                        "name": "Secondary",
                        "value": "SECONDARY"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/core/models/button-type.enum.ts"
            },
            {
                "name": "WeatherState",
                "childs": [
                    {
                        "name": "Thunderstorm",
                        "value": "THUNDERSTORM"
                    },
                    {
                        "name": "Drizzle",
                        "value": "DRIZZLE"
                    },
                    {
                        "name": "Rain",
                        "value": "RAIN"
                    },
                    {
                        "name": "Snow",
                        "value": "SNOW"
                    },
                    {
                        "name": "Atmosphere",
                        "value": "ATMOSPHERE"
                    },
                    {
                        "name": "Clear",
                        "value": "CLEAR"
                    },
                    {
                        "name": "Clouds",
                        "value": "CLOUDS"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/core/models/weather-state.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/shared/components/card/card.stories.ts": [
                {
                    "name": "Card",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/card/card.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `<wa-card>Card Component</wa-card>`\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  weatherAPI: {\n    baseUrl: 'https://api.openweathermap.org/data/2.5/weather',\n    apiKey: '<YOUR API KEY>'\n  }\n}"
                }
            ],
            "src/app/home/forecast-card/forecast-card.stories.ts": [
                {
                    "name": "ForecastCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/forecast-card/forecast-card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/forecast-card/forecast-card.stories.ts",
                    "type": "Story<ForecastCardComponent>",
                    "defaultValue": "args => ({\n  props: { ...args }\n})"
                }
            ],
            "src/app/shared/components/icon-button/icon-button.stories.ts": [
                {
                    "name": "IconButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/icon-button/icon-button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `\n    <wa-icon-button>\n      <span class=\"material-icons\">gps_fixed</span>\n    </wa-icon-button>\n  `\n})"
                }
            ],
            "src/app/core/constants/weatherImages.ts": [
                {
                    "name": "images",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/weatherImages.ts",
                    "type": "any",
                    "defaultValue": "{\n  [WeatherState.Thunderstorm]: 'assets/thunderstorm.png',\n  [WeatherState.Drizzle]: 'assets/drizzle.png',\n  [WeatherState.Rain]: 'assets/rain.png',\n  [WeatherState.Snow]: 'assets/snow.png',\n  [WeatherState.Atmosphere]: 'assets/atmosphere.png',\n  [WeatherState.Clear]: 'assets/clear.png',\n  [WeatherState.Clouds]: 'assets/clouds.png'\n}"
                }
            ],
            "src/app/shared/components/button/button.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `<wa-button>Primary</wa-button>`\n})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `<wa-button type=${ButtonType.Secondary}>Secondary</wa-button>`\n})"
                }
            ],
            "src/app/home/weather-image/weather-image.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/weather-image/weather-image.stories.ts",
                    "type": "Story<WeatherImageComponent>",
                    "defaultValue": "args => ({\n  props: { ...args }\n})"
                },
                {
                    "name": "WeatherImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/weather-image/weather-image.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/home/weather-info/weather-info.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/weather-info/weather-info.stories.ts",
                    "type": "Story<WeatherInfoComponent>",
                    "defaultValue": "args => ({\n  props: { ...args }\n})"
                },
                {
                    "name": "WeatherInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/weather-info/weather-info.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/core/models/button-type.enum.ts": [
                {
                    "name": "ButtonType",
                    "childs": [
                        {
                            "name": "Primary",
                            "value": "PRIMARY"
                        },
                        {
                            "name": "Secondary",
                            "value": "SECONDARY"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/core/models/button-type.enum.ts"
                }
            ],
            "src/app/core/models/weather-state.enum.ts": [
                {
                    "name": "WeatherState",
                    "childs": [
                        {
                            "name": "Thunderstorm",
                            "value": "THUNDERSTORM"
                        },
                        {
                            "name": "Drizzle",
                            "value": "DRIZZLE"
                        },
                        {
                            "name": "Rain",
                            "value": "RAIN"
                        },
                        {
                            "name": "Snow",
                            "value": "SNOW"
                        },
                        {
                            "name": "Atmosphere",
                            "value": "ATMOSPHERE"
                        },
                        {
                            "name": "Clear",
                            "value": "CLEAR"
                        },
                        {
                            "name": "Clouds",
                            "value": "CLOUDS"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/core/models/weather-state.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/weatherImages.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "images",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/city.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "City",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/city.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CityResponse",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/forecast.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Forecast",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/forecast.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ForecastResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/weather-image.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WeatherImageService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/weather.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WeatherService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/home/forecast-card/forecast-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForecastCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/forecast-card/forecast-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ForecastCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/forecast-card/forecast-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/home/weather-image/weather-image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WeatherImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/home/weather-image/weather-image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/weather-image/weather-image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WeatherImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/weather-info/weather-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WeatherInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/weather-info/weather-info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/weather-info/weather-info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WeatherInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Card",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon-button/icon-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon-button/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}